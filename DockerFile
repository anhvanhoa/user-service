# Build stage
FROM golang:1.24-alpine AS builder

# Set working directory
WORKDIR /app

# Install git and ca-certificates (needed for go mod download)
RUN apk add --no-cache git ca-certificates

# Configure git for private repositories
RUN git config --global url."https://github.com/".insteadOf "git@github.com:" && \
    git config --global url."https://".insteadOf "git://"

# Avoid interactive prompts from git/go when accessing private repos
ENV GIT_TERMINAL_PROMPT=0
# Ensure private repos bypass proxy and sumdb
ENV GOPRIVATE=github.com/anhvanhoa/*
ENV GONOSUMDB=github.com/anhvanhoa/*

# Note: We'll mount the GitHub token secret directly on the go commands that need it

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies with secret-mounted token for private modules
RUN --mount=type=secret,id=github_token \
    set -e; \
    if [ -f /run/secrets/github_token ]; then \
      GITHUB_TOKEN=$(cat /run/secrets/github_token); \
      echo "machine github.com login ${GITHUB_TOKEN} password x-oauth-basic" > ~/.netrc; \
      chmod 600 ~/.netrc; \
    fi; \
    go env -w GOPRIVATE=${GOPRIVATE}; \
    go env -w GONOSUMDB=${GONOSUMDB}; \
    go mod tidy

# Copy source code
COPY . .

# Build the application with secret-mounted token for private modules (in case of new deps)
RUN --mount=type=secret,id=github_token \
    set -e; \
    if [ -f /run/secrets/github_token ]; then \
      GITHUB_TOKEN=$(cat /run/secrets/github_token); \
      echo "machine github.com login ${GITHUB_TOKEN} password x-oauth-basic" > ~/.netrc; \
      chmod 600 ~/.netrc; \
    fi; \
    CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main ./cmd/main.go

# Final stage
FROM alpine:latest

# Install ca-certificates for HTTPS requests
RUN apk --no-cache add ca-certificates

# Create non-root user
RUN adduser -D -s /bin/sh appuser

# Set working directory
WORKDIR /app

# Copy the binary from builder stage
COPY --from=builder /app/main .


# Change ownership to appuser
RUN chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 40053

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:40053/health || exit 1

# Run the application
CMD ["./main"]
